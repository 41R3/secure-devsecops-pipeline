name: DevSecOps Pipeline

on: [push, pull_request]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Limpiar contenedores previos
        run: |
          docker ps -aq | xargs docker rm -f || true
          docker system prune -f

      - name: Iniciar app Flask
        run: |
          cd app
          pkill -f gunicorn || true
          gunicorn --bind 0.0.0.0:5000 \
                  --workers 2 \
                  --threads 4 \
                  --access-logfile - \
                  --log-level warning \
                  wsgi:app > app.log 2>&1 &
          sleep 15
          curl --retry 5 \
               --retry-delay 3 \
               --max-time 10 \
               --connect-timeout 5 \
               -s http://localhost:5000/health || (cat app.log && exit 1)

      - name: Verificar estado de la app
        run: |
          netstat -tulnp | grep ':5000' || (echo "App no está en puerto 5000" && exit 1)
          curl -s http://localhost:5000/health | grep healthy || exit 1

      - name: Verificar nombres de artefactos
        run: |
          echo "Nombres de artefactos a subir:"
          echo "ZAP: zap-reports-artifact"
          echo "Hardening: hardening-report-artifact"

      - name: Escanear con OWASP ZAP (Versión Corregida)
        run: |
          docker run --rm \
            --network host \
            -v $(pwd):/zap/wrk/:rw \
            -t ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://localhost:5000 \
            -a -T 60 -s \
            -z "-config api.disablekey=true \
                -config scanner.attackOnStart=true \
                -config connection.timeoutInSecs=600 \
                -config scanner.threadPerHost=2" \
            -r zap-report.html \
            -w zap-report.md


      - name: Guardar reporte ZAP
        run: |
          mkdir -p zap
          # Mover reportes generados
          [ -f zap-report.html ] && mv zap-report.html zap/ || echo "Reporte HTML no generado"
          [ -f zap-report.md ] && mv zap-report.md zap/ || echo "Reporte MD no generado"
          # Crear archivos vacíos si no existen
          touch zap/zap-report.html zap/zap-report.md
          echo "=== Archivos en zap/ ==="
          ls -lh zap/
      

      - name: Subir reportes ZAP
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports-artifact
          path: zap/
          retention-days: 7
        if: always()

  server-hardening:
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Ejecutar hardening CIS
        run: |
          cd ansible
          ansible-playbook playbook.yml -v
          echo "=== Reporte de Hardening ==="
          cat hardening-report.txt || echo "No se generó reporte"
          [ -f hardening-report.txt ] || exit 1

      - name: Subir reporte de hardening
        uses: actions/upload-artifact@v4
        with:
          name: hardening-report-artifact
          path: ansible/hardening-report.txt
          retention-days: 7
        if: always()
