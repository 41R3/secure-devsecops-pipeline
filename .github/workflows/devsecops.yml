name: DevSecOps Pipeline

on: [push, pull_request]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Iniciar app Flask
        run: |
          cd app
          # Detener cualquier instancia previa
          pkill -f gunicorn || true
          # Instalar dependencias
          pip install -r requirements.txt
          # Iniciar con Gunicorn
          gunicorn --bind 0.0.0.0:5000 --workers 2 --threads 4 --access-logfile - wsgi:app > app.log 2>&1 &
          # Esperar y verificar
          sleep 10  # Aumentado a 10 segundos
          curl --retry 5 --retry-delay 3 --max-time 10 -s http://localhost:5000/health || (cat app.log && exit 1)

      - name: Verificar estado de la app
        run: |
          netstat -tuln | grep 5000 || (echo "La app no está escuchando en el puerto 5000" && exit 1)
          curl -s http://localhost:5000/health

      - name: Escanear con OWASP ZAP
        uses: zaproxy/action-full-scan@v0.11.0
        with:
          target: 'http://localhost:5000'
          cmd_options: '-a -T 60 -s'  # Aumentar timeout a 60 minutos
          # Opciones clave para resolver el error:
          zap_options: '-config api.disablekey=true -config scanner.attackOnStart=true -config connection.timeoutInSecs=600 -config scanner.threadPerHost=2'
          allow_issue_writing: false

      - name: Verificar logs de ZAP
        if: always()
        run: |
          docker logs $(docker ps -aq --filter ancestor=ghcr.io/zaproxy/zaproxy:stable) > zap.log 2>&1 || true
          cat zap.log
          grep -i "error" zap.log || echo "No se encontraron errores en logs de ZAP"

      - name: Guardar reporte ZAP
        run: |
          mkdir -p zap
          # Copiar todos los reportes generados
          find . -name '*.html' -exec cp {} zap/ \;
          find . -name '*.md' -exec cp {} zap/ \;
          # Renombrar archivos principales
          [ -f zap/report_html.html ] && mv zap/report_html.html zap/zap-report.html || echo "Reporte HTML no encontrado"
          [ -f zap/report_md.md ] && mv zap/report_md.md zap/zap-report.md || echo "Reporte MD no encontrado"
          # Crear archivo vacío si no hay reportes
          touch zap/zap-report.html zap/zap-report.md
        if: always()

      - name: Subir reportes ZAP
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap/
        if: always()

  server-hardening:
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Ejecutar hardening CIS
        run: |
          cd ansible
          ansible-playbook playbook.yml
          cat hardening-report.txt

      - name: Subir reporte de hardening
        uses: actions/upload-artifact@v4
        with:
          name: hardening-report
          path: ansible/hardening-report.txt
