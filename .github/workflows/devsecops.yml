name: DevSecOps Pipeline

on: [push, pull_request]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias de la app
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Limpiar contenedores previos
        run: |
          docker ps -aq | xargs docker rm -f || true
          docker system prune -f

      - name: Iniciar app Flask con Gunicorn y validar
        run: |
          cd app
          pkill -f gunicorn || true
          nohup gunicorn --bind 0.0.0.0:5000 wsgi:app \
               --workers 2 --threads 4 > app.log 2>&1 &
          for i in {1..10}; do
            if curl -sf http://127.0.0.1:5000/health | grep -q healthy; then
              echo "✅ App lista"
              break
            else
              echo "⏳ Intento $i: esperando a la app..."
              sleep 5
            fi
          done
          curl -sf http://127.0.0.1:5000/health || (cat app.log && exit 1)

      - name: Preparar directorio de reportes ZAP
        run: |
          mkdir -p zap
          chmod 777 zap

      - name: Escanear con OWASP ZAP
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}/zap:/zap/wrk:rw \
            -e ZAP_JVM_OPTIONS="-Xmx2g" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
              -t http://127.0.0.1:5000 \
              -a -T 30 -s \
              -z "-config api.disablekey=true \
                  -config scanner.attackOnStart=true \
                  -config connection.timeoutInSecs=300 \
                  -config scanner.threadPerHost=2 \
                  -config domxss.scan=false \
                  -config spider.maxDuration=15" \
              -r /zap/wrk/zap-report.html \
              -w /zap/wrk/zap-report.md \
          | tee zap-scan.log

      - name: Incluir logs y marcar “no vulnerabilities” si aplica
        run: |
          cd zap
          # Añadir sección de Logs al Markdown
          echo -e "\n\n---\n## Scan Logs\n" >> zap-report.md
          sed 's/^/    /' ../zap-scan.log >> zap-report.md

          # Insertar “No vulnerabilities” en HTML si no hay alertitem
          if ! grep -q "<alertitem>" zap-report.html; then
            sed -i '/<\/body>/i <h2 style="color:green;text-align:center;">✅ No vulnerabilities found</h2>' zap-report.html
          fi

      - name: Diagnóstico si está vacío
        if: always()
        run: |
          echo "=== Contenido de zap/ ==="
          ls -lh zap
          if [ ! -s zap/zap-report.html ]; then
            echo "❌ El reporte HTML está vacío. Aquí zap-scan.log:"
            cat zap-scan.log
            exit 1
          fi
          if [ ! -s zap/zap-report.md ]; then
            echo "❌ El reporte MD está vacío. Aquí zap-scan.log:"
            cat zap-scan.log
            exit 1
          fi

      - name: Subir reportes ZAP
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: zap/
          retention-days: 7

  server-hardening:
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Ejecutar hardening CIS
        run: |
          cd ansible
          ansible-playbook playbook.yml -v > hardening.log 2>&1 || true
          [ -f hardening-report.txt ] || echo "No se generó reporte" > hardening-report.txt
          cat hardening-report.txt

      - name: Subir reporte de hardening
        uses: actions/upload-artifact@v4
        with:
          name: hardening-report-artifact
          path: ansible/hardening-report.txt
          retention-days: 7

